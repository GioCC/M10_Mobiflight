FSP-M10 Boards - I/O allocation
===============================

Digital I/Os are addressable on M10 cards through a "pin number" or index.
A given pin# corresponds either to an input or an output (there are no separate addressing spaces for inputs or outputs).
The definition as input or output is fixed for a given card; however, from the user's standpoint, trying to read from an output or write to an input does no harm. 

Indexes are as following:

 1..16  I/O pins on main board
17..32  I/O pins on extension board (where present: currently for AP-LED and -LCD only)

33..54  [output] custom LED equivalent outputs (segments driven by LED drivers) - see below
        [input]  alternate encoder mirror (see below)
For the detailed function of pins 1..32 see the specific card documentation.

Custom LED outputs are coded only on some cards, detailed below (as display#-digit#-segment):
- for XPDR-OBS-CLK:
  33    XPDR1   0-4-dp
  34    XPDR2   0-3-dp
  35    XPDR3   0-2-dp
  36    XPDR4   0-1-dp
  37    VOR1    0-8-A
  38    VOR2    0-8-G
  39    ADF     0-8-D
  40    RVS     0-8-dp
  41    COLON2  1-2-dp
  42    COLON1+COLON2 1-3-dp+1-2-dp
  43    TMR     1-4-dp*

- for AP (LED):
  33    ALT     0-6-A
  34    VSPD    0-6-B
  35    IAS     0-6-C
  36    ATHR    0-6-D
  37    APON1   0-6-E
  38    APON2   0-6-F
  39    HDG     2-7-A
  40    CRS     2-7-B
  41    BANK1   2-7-C
  42    BANK2   2-7-D
  43    BANK3   2-7-E
  44    BANK4   2-7-F
  45    BANK5   2-7-G
  46    FD      2-8-A
  47    GPS     2-8-B
  48    APR     2-8-C
  49    REV     2-8-D

Alternate encoder mirrors:
==========================
The ArdSim routine directly reads input pins in order to evaluate encoders.
This prevents that a single encoder can be used for different functions according to e.g. the position of other switches.
Modes could be used, but these are normally more useful for actual function modes (eg coarse/fine switching).
A solution could be to mirror the actual encoder pins to another location of several (7) available in the range 33..54*.
This way, ArdSim encoders can be made to point to these "virtual" locations (one of them at a time is active) for all
encoders that the actual one should stand for.
It is also relatively inexpensive: the input values from each "multirole" encoder should just be translated according to a parameter
and copied into the bit vector of virtual encoders.
* 7 "virtual" positions are available, plus the "true" position (whose inputs should normally be blanked if virtual positions are in use).